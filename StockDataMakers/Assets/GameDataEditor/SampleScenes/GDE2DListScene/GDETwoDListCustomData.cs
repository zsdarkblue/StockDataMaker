/*
http://www.cgsoso.com/forum-211-1.html

CG搜搜 Unity3d 每日Unity3d插件免费更新 更有VIP资源！

CGSOSO 主打游戏开发，影视设计等CG资源素材。

插件如若商用，请务必官网购买！

daily assets update for try.

U should buy the asset from home store if u use it in your project!
*/

// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by the Game Data Editor.
//
//      Changes to this file will be lost if the code is regenerated.
//
//      This file was generated from this data file:
//      /Projects/gde_unity_4.5/Assets/GameDataEditor/SampleScenes/GDE2DListScene/Resources/2dlist_scene_data.json
//  </autogenerated>
// ------------------------------------------------------------------------------
using UnityEngine;
using System;
using System.Collections.Generic;

using GameDataEditor;

namespace GameDataEditor
{
    public class GDETwoDListCustomData : IGDEData
    {
        static string cust_string_listKey = "cust_string_list";
		public List<string>      cust_string_list;
		public void Set_cust_string_list()
        {
	        GDEDataManager.SetStringList(_key, cust_string_listKey, cust_string_list);
		}
		

        public GDETwoDListCustomData(string key) : base(key)
        {
            GDEDataManager.RegisterItem(this.SchemaName(), key);
        }
        public override Dictionary<string, object> SaveToDict()
		{
			var dict = new Dictionary<string, object>();
			dict.Add(GDMConstants.SchemaKey, "TwoDListCustom");
			
            dict.Merge(true, cust_string_list.ToGDEDict(cust_string_listKey));
            return dict;
		}

        public override void UpdateCustomItems(bool rebuildKeyList)
        {
        }

        public override void LoadFromDict(string dataKey, Dictionary<string, object> dict)
        {
            _key = dataKey;

			if (dict == null)
				LoadFromSavedData(dataKey);
			else
			{
                dict.TryGetStringList(cust_string_listKey, out cust_string_list);
                LoadFromSavedData(dataKey);
			}
		}

        public override void LoadFromSavedData(string dataKey)
		{
			_key = dataKey;
			
            cust_string_list = GDEDataManager.GetStringList(_key, cust_string_listKey, cust_string_list);
        }

        public GDETwoDListCustomData ShallowClone()
		{
			string newKey = Guid.NewGuid().ToString();
			GDETwoDListCustomData newClone = new GDETwoDListCustomData(newKey);

            newClone.cust_string_list = new List<string>(cust_string_list);
			newClone.Set_cust_string_list();

            return newClone;
		}

        public GDETwoDListCustomData DeepClone()
		{
			GDETwoDListCustomData newClone = ShallowClone();
            return newClone;
		}

        public void Reset_cust_string_list()
        {
	        GDEDataManager.ResetToDefault(_key, cust_string_listKey);

	        Dictionary<string, object> dict;
	        GDEDataManager.Get(_key, out dict);
	        dict.TryGetStringList(cust_string_listKey, out cust_string_list);
        }
		

        public void ResetAll()
        {
            GDEDataManager.ResetToDefault(_key, cust_string_listKey);


            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            LoadFromDict(_key, dict);
        }
    }
}
